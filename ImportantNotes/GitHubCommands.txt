To clone a Git repository into a specific folder use below commands
1) cd /path/to/your/desired/parent/directory
2) git clone <repository-url> <folder-name>
--------------------------------------------------------------------------------------------
Create ".gitignore" file and staging the changes
1) touch .gitignore
2) git status
3) git add <file name>
4) git commit -m "Write your Commit Message"
5) git push
----------------------------------------------------------------------------------------------
Commands For Editing the Global Information Of The User
1) Your Configuration File : git config --global --edit 
2) Once you run the above command one "Editor" Will open, Then Press "I" button from your keyboard for initializing the insert mode
3) After doing your changes press "Esc" Escape Button on keyboard & then press ":" Button on keyboard
4) To type a colon (:) on a standard QWERTY keyboard, you must press and hold the Shift key while simultaneously pressing the key that also contains the semicolon (;) symbol, which is typically located to the right of the "L" key
5) Type "wq" once you see the colon & press enter to save the changes -> Example = {:wq} 
6) If you don't want to save the changes then to discard them press ":q" for quit the session
7) git config --global user.email -> Check your GitHub Configuration user name
8) git config --global user.name -> Check your registered email
9) git config --global user.email "ratnakarkolhatkar@gmail.com"
10) git config --global user.name "Ratnakar"
----------------------------------------------------------------------------------------------
Command for Adding remote Git Repository
1) git remote add origin <REMOTE_URL> -> Example: git remote add origin https://github.com/OWNER/REPOSITORY.git
2) branch -M main
3) push -u origin main
--------------------------------------------------------------------------------------------------
Here’s a clean, step-by-step playbook to fix “can’t push/commit to GitHub” when the cause is SSH. Follow it in order—stop as soon as your push works.

# 0) Quick checks (often the fix)

1. Confirm you’re using SSH, not HTTPS

```bash
git remote -v
# If you see https://..., switch to SSH:
git remote set-url origin git@github.com:OWNER/REPO.git
```

Managing/changing remote URLs. ([GitHub Docs][1])

2. Test your SSH connection

```bash
ssh -T git@github.com
# First time? Compare the shown fingerprint to GitHub’s page, then type: yes
```

Testing the connection and verifying fingerprints. ([GitHub Docs][2])

3. See if you even have keys

```bash
ls -al ~/.ssh
ssh-add -l 2>/dev/null || echo "no keys loaded"
```

How to check for existing SSH keys. ([GitHub Docs][3])

---

# A) Generate a **new** SSH key (recommended)

**Mac/Linux/Git Bash (Windows):**

```bash
# 1) Create a modern key (Ed25519)
ssh-keygen -t ed25519 -C "your_email@example.com" -f ~/.ssh/id_ed25519_github

# 2) Start agent & load key
eval "$(ssh-agent -s)"
ssh-add ~/.ssh/id_ed25519_github

# macOS (optional, saves passphrase in Keychain)
# Add this to ~/.ssh/config if it’s not there:
# Host github.com
#   AddKeysToAgent yes
#   UseKeychain yes
#   IdentityFile ~/.ssh/id_ed25519_github
```

Platform-specific steps & macOS Keychain notes. ([GitHub Docs][4])

**Windows (PowerShell) — agent service:**

```powershell
Get-Service -Name ssh-agent | Set-Service -StartupType Manual
Start-Service ssh-agent
ssh-add $env:USERPROFILE\.ssh\id_ed25519_github
```

Windows ssh-agent steps. ([GitHub Docs][4])

**Add the public key to GitHub:**

```bash
# show/copy your public key:
cat ~/.ssh/id_ed25519_github.pub
```

Then in GitHub: **Settings → SSH and GPG keys → New SSH key**, paste, save. (Or use CLI: `gh ssh-key add ~/.ssh/id_ed25519_github.pub --title "My Laptop" --type authentication`.) ([GitHub Docs][5], [GitHub CLI][6])

**Test & push:**

```bash
ssh -T git@github.com
git push -u origin YOUR_BRANCH
```

Connection test instructions. ([GitHub Docs][2])

---

# B) Update / fix an **existing** SSH setup

1. If you have a key but it isn’t loaded:

```bash
eval "$(ssh-agent -s)"
ssh-add ~/.ssh/id_ed25519   # or your key name
```

Adding keys to the agent. ([GitHub Docs][4])

2. If your key isn’t on GitHub yet: copy `~/.ssh/<key>.pub` and add it in **Settings → SSH and GPG keys** (or `gh ssh-key add`). ([GitHub Docs][5], [GitHub CLI][6])

3. If you renamed the file or use multiple keys, point SSH at the right one with `~/.ssh/config`:

```
Host github.com
  HostName github.com
  User git
  IdentityFile ~/.ssh/id_ed25519_github
  IdentitiesOnly yes
  AddKeysToAgent yes
```

macOS note: add `UseKeychain yes` (remove it on Linux/Windows). ([GitHub Docs][4])

4. Rotate keys safely (no downtime):

* Generate & add a **new** key (section A).
* Test `ssh -T git@github.com`.
* Remove the **old** key from **Settings → SSH and GPG keys**. ([GitHub Docs][7])

---

# C) If you’re behind a firewall that blocks SSH (port 22)

Use SSH over HTTPS (port 443):

```
# ~/.ssh/config
Host github.com
  HostName ssh.github.com
  Port 443
  User git
  IdentityFile ~/.ssh/id_ed25519_github
  IdentitiesOnly yes
```

Guide for SSH over the HTTPS port. ([GitHub Docs][8])

---

# D) Common errors → quick fixes

* **`Permission denied (publickey)`**
  Means GitHub didn’t accept a key. Ensure the correct key is **loaded** (`ssh-add -l`), **listed in GitHub**, and your remote URL is **SSH**. Run a verbose test:
  `ssh -vT git@github.com` to see which key is offered. ([GitHub Docs][9])
* **Keeps asking for password/token**
  You’re likely on **HTTPS**. Switch remote to SSH (see step 0.1). ([GitHub Docs][1])
* **Host key changed / authenticity prompt**
  Compare the shown fingerprint to GitHub’s official list before accepting. ([GitHub Docs][10])
* **Wrong repo/owner**
  Verify the SSH URL format: `git@github.com:OWNER/REPO.git`. ([LabEx][11])

---

## End-to-end example (Linux/macOS)

```bash
# in your repo
git remote -v
git remote set-url origin git@github.com:acme/payments.git

ssh-keygen -t ed25519 -C "dev@acme.com" -f ~/.ssh/id_ed25519_acme
eval "$(ssh-agent -s)"
ssh-add ~/.ssh/id_ed25519_acme

cat ~/.ssh/id_ed25519_acme.pub  # paste into GitHub → Settings → SSH and GPG keys

ssh -T git@github.com           # should greet you by username
git push -u origin main
```

Uses official keygen, agent, add-key, test, and remote-URL steps. ([GitHub Docs][4])

---

## Official references (for deeper reading)

* **Connect with SSH:** overview, generate keys, add to agent, test. ([GitHub Docs][12])
* **Add key to GitHub account:** web UI & GitHub CLI. ([GitHub Docs][5], [GitHub CLI][6])
* **Manage remote URLs:** switch HTTPS↔SSH. ([GitHub Docs][1])
* **Troubleshoot SSH / use SSH over HTTPS (443):** ([GitHub Docs][13])
* **GitHub SSH host key fingerprints:** verify authenticity. ([GitHub Docs][10])

If you paste any exact error you see, I’ll map it to the fastest fix.

[1]: https://docs.github.com/en/get-started/git-basics/managing-remote-repositories?utm_source=chatgpt.com "Managing remote repositories"
[2]: https://docs.github.com/en/authentication/connecting-to-github-with-ssh/testing-your-ssh-connection?utm_source=chatgpt.com "Testing your SSH connection"
[3]: https://docs.github.com/articles/checking-for-existing-ssh-keys?utm_source=chatgpt.com "Checking for existing SSH keys"
[4]: https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent "Generating a new SSH key and adding it to the ssh-agent - GitHub Docs"
[5]: https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account?utm_source=chatgpt.com "Adding a new SSH key to your GitHub account"
[6]: https://cli.github.com/manual/gh_ssh-key?utm_source=chatgpt.com "gh ssh-key"
[7]: https://docs.github.com/enterprise-cloud%40latest/authentication/keeping-your-account-and-data-secure/reviewing-your-ssh-keys?utm_source=chatgpt.com "Reviewing your SSH keys - GitHub Enterprise Cloud Docs"
[8]: https://docs.github.com/en/authentication/troubleshooting-ssh/using-ssh-over-the-https-port?utm_source=chatgpt.com "Using SSH over the HTTPS port"
[9]: https://docs.github.com/en/authentication/troubleshooting-ssh/error-permission-denied-publickey?utm_source=chatgpt.com "Error: Permission denied (publickey)"
[10]: https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/githubs-ssh-key-fingerprints?utm_source=chatgpt.com "GitHub's SSH key fingerprints"
[11]: https://labex.io/tutorials/git-git-remote-url-understanding-and-managing-remote-repositories-391534?utm_source=chatgpt.com "Git Remote URL: Understanding and Managing ..."
[12]: https://docs.github.com/en/authentication/connecting-to-github-with-ssh?utm_source=chatgpt.com "Connecting to GitHub with SSH"
[13]: https://docs.github.com/en/authentication/troubleshooting-ssh?utm_source=chatgpt.com "Troubleshooting SSH"
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# YAML — short step-by-step guide for developers (with examples)

1. **What & file name**
   YAML = human-friendly data serialization. Files use `.yaml` or `.yml`.

2. **Basic rules**

* Indent with **spaces** (2 is common). **Never use tabs**.
* Use `#` for comments.
* Case-sensitive keys.

3. **Scalars (values)**

```yaml
name: "Alice"     # string
age: 30           # integer
price: 19.95      # float
active: true      # boolean
empty: null       # null (or ~)
code: "0123"      # quote to keep leading zeros
```

4. **Mappings (objects)**

```yaml
person:
  name: Alice
  role: developer
```

5. **Sequences (lists)**

```yaml
servers:
  - app1.example.com
  - app2.example.com
```

6. **Nesting (combine maps & lists)**

```yaml
app:
  name: payments
  env:
    - name: DB_HOST
      value: db.internal
```

7. **Flow (inline) style**

```yaml
colors: [red, green, blue]
user: {name: Bob, active: true}
```

8. **Multiline strings**

* Literal `|` preserves newlines.
* Folded `>` joins lines into one paragraph.

```yaml
literal: |
  Line1
  Line2

folded: >
  This will be one line
  when parsed.
```

9. **Anchors, aliases & merge (reuse blocks)**

```yaml
defaults: &defaults
  timeout: 30
  retries: 3

service:
  <<: *defaults
  name: api
```

10. **Type tags (force type)**

```yaml
age: !!str 30    # force string "30"
```

11. **Common gotchas**

* YAML auto-parses `yes/no`, `on/off`, and dates — **quote** ambiguous values.
* Avoid duplicate keys.
* Validate with linters before deploying.

12. **Where YAML is used (short examples)**

* **Docker Compose**

```yaml
version: "3.8"
services:
  web:
    image: nginx:alpine
    ports: ["80:80"]
```

* **GitHub Actions**

```yaml
name: CI
on: [push]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: echo "build"
```

* **Kubernetes**

```yaml
apiVersion: apps/v1
kind: Deployment
metadata: { name: web }
spec:
  replicas: 2
  template:
    spec:
      containers:
        - name: web
          image: nginx:alpine
```

* **Ansible (playbook)**

```yaml
- hosts: web
  tasks:
    - name: install nginx
      apt:
        name: nginx
        state: present
```

13. **Best practices**

* Use consistent indentation (2 spaces).
* Quote values when in doubt.
* Keep root `README` documenting keys and expected types.
* Validate with `yamllint`/`yq`/CI checks.

---

### Minimal all-in-one example

```yaml
app: payments
version: "1.0"
maintainers:
  - name: Alice
    email: alice@example.com
settings: &defaults
  timeout: 30
  retries: 2

services:
  - name: api
    <<: *defaults
    env:
      - name: DB_URL
        value: "postgres://db:5432/pay"
description: |
  Payment service
  Handles transactions and webhooks.
```