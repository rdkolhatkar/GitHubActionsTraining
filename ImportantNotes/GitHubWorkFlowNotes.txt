A GitHub Workflow is an automated process defined in a repository using YAML files inside the .github/workflows/ folder.
It is part of GitHub Actions and helps automate tasks like building, testing, and deploying code.
A workflow is triggered by events (e.g., push, pull_request, or schedule) and consists of one or more jobs, which are groups of steps.
Steps can run shell commands or use reusable actions. Jobs run on runners (machines provided by GitHub or self-hosted).
------------------------------------------------------------------------------------------------------------------------------------------------
Install GitHub Actions Extension for VS Code
-------------------------------------------------------------------------------------------------------------------------------------------------
Commands for GitHub Workflow
1) mkdir .github
2) cd .github
3) mkdir workflows
4) cd workflows
5) touch 01-building-blocks.yaml
-----------------------------------------------------------------------------------------------------------------------------------------------------------
ðŸ”¹ Mandatory Components of GitHub Workflow YAML File

1) name (optional but recommended) -> A human-readable name for the workflow.

name: CI Pipeline

on (REQUIRED) -> Defines the event that triggers the workflow (e.g., push, pull_request, schedule, workflow_dispatch).

on: push

jobs (REQUIRED) -> Defines one or more jobs that will run in the workflow.

jobs:
  build:
    runs-on: ubuntu-latest   # REQUIRED for each job â†’ defines the runner
    steps:                   # REQUIRED inside each job
      - name: Checkout code
        uses: actions/checkout@v3

Inside jobs:

runs-on (REQUIRED) â†’ specifies the runner (e.g., ubuntu-latest, windows-latest).

steps (REQUIRED) â†’ list of tasks to execute. Each step should have:

uses: â†’ to run an action, OR

run: â†’ to run a shell command.
------------------------------------------------------------------------------------------------------------------------------------------------------------------
GitHub **workflow events** are the **triggers** that tell GitHub Actions when to run a workflow. A workflow is defined in a `.yml` file under `.github/workflows/`, and each workflow starts only when one or more **events** happen in a repository.

---

## ðŸ”‘ Types of GitHub Workflow Events

1. **Repository Events (Code-related)**
   Triggered when something happens in the repository (like commits, PRs, tags).

   * **push** â†’ Runs when code is pushed to a branch.

     ```yaml
     on:
       push:
         branches:
           - main
     ```

     âœ… Example: Run tests when someone pushes code to the `main` branch.

   * **pull\_request** â†’ Runs when a pull request is opened, synchronized, or merged.

     ```yaml
     on:
       pull_request:
         branches:
           - develop
     ```

     âœ… Example: Run CI build when a PR targets the `develop` branch.

   * **release** â†’ Runs when a release is created, edited, or published.

     ```yaml
     on:
       release:
         types: [published]
     ```

     âœ… Example: Deploy app automatically when a release is published.

---

2. **Schedule Events (Time-based)**
   Triggered automatically based on cron expressions (UTC time).

   ```yaml
   on:
     schedule:
       - cron: "0 2 * * *"   # Every day at 2 AM UTC
   ```

   âœ… Example: Run nightly builds or clean-up jobs.

---

3. **Manual Events (User-triggered)**

   * **workflow\_dispatch** â†’ Run manually from GitHub UI with optional inputs.

     ```yaml
     on:
       workflow_dispatch:
         inputs:
           environment:
             description: "Deploy environment"
             required: true
             default: "staging"
     ```

     âœ… Example: A developer clicks **Run Workflow** in GitHub Actions and chooses whether to deploy to `staging` or `production`.

---

4. **External Events (Other Systems / APIs)**

   * **repository\_dispatch** â†’ Triggered via API call from an external system.

     ```yaml
     on:
       repository_dispatch:
         types: [custom-event]
     ```

     âœ… Example: Trigger build from an external CI/CD tool.

---

5. **Other Useful Events**

   * **issues** â†’ Runs when issues are opened, closed, labeled, etc.

     ```yaml
     on:
       issues:
         types: [opened]
     ```

     âœ… Example: Post a welcome comment when a new issue is created.

   * **workflow\_run** â†’ Trigger a workflow after another workflow finishes.

     ```yaml
     on:
       workflow_run:
         workflows: ["CI Tests"]
         types:
           - completed
     ```

     âœ… Example: Run deployment workflow only after tests workflow passes.

---

## ðŸ“Œ Summary Example

Hereâ€™s a workflow that triggers on multiple events:

```yaml
name: Example Workflow

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: "0 3 * * 1"  # Every Monday 3 AM UTC
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run tests
        run: echo "Running tests..."
```

ðŸ”¹ This workflow runs when:

* Code is pushed to `main`.
* A PR targets `main`.
* Every Monday at 3 AM.
* Or when manually triggered.

---